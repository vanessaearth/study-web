<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>

<body>
  <!-- <div>promise解决回调地狱</div> -->
  <script>
    let p = new Promise((resolve, reject) => {
      resolve('success')
      // reject('error')
    })
    /**
     * 原型方法：
     * then都会返还一个promise对象，为了实现链式操作
     */
    let p2 = p.then(res => {
      console.log(res)
      // return 123
      return new Promise((resolve,reject)=>{
        resolve('wahahh')
      })
    }, err => {
      console.log('err', err)
    }).catch(e => {
      console.log('catch', e)
    }).finally(() => {
      console.log('执行完成')
    })
    // err和catch都能捕捉错误
    console.log('p2', p2)
    // 2.静态方法resolve reject all race allSettled
    let r1 = Promise.resolve('success')
    let r2 = Promise.reject('error...')
    console.log('r1', r1)
    console.log('r2', r2)

    let p3=new Promise((resolve,rej)=>{
      setTimeout(()=>{
        console.log('33333')
        resolve('success')
      },1000)
    })
    let p4=new Promise((resolve,rej)=>{
      setTimeout(()=>{
        console.log('444')
        resolve('success')
      },5000)
    })
    let p5=new Promise((resolve,reject)=>{
      setTimeout(()=>{
        console.log('555')
        reject('reject')
      },100)
    })
    //全部请求完返回
Promise.all([p3,p5]).then(res=>{
  console.log('all',res)
})
//返回含有reject的
Promise.allSettled([p3,p4,p5]).then(res=>{
  console.log('allSetteld',res)
})
//返回最快的一个
Promise.race([p3,p4,p5]).then(res=>{
  console.log('race',res)
},err=>{
  console.log('race-err',err)
})
  </script>

</body>

</html>